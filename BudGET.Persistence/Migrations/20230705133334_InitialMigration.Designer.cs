// <auto-generated />
using System;
using BudGET.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BudGET.Persistence.Migrations
{
    [DbContext(typeof(BudGETDbContext))]
    [Migration("20230705133334_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BudGET.Domain.Entities.Budget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompteId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Exception")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Montant")
                        .HasColumnType("double precision");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompteId");

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("BudGET.Domain.Entities.Compte", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("EstCompteCourant")
                        .HasColumnType("boolean");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Montant")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Comptes");
                });

            modelBuilder.Entity("BudGET.Domain.Entities.Depense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BudgetId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompteId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Valeur")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.HasIndex("CompteId");

                    b.ToTable("Depenses");
                });

            modelBuilder.Entity("BudGET.Domain.Entities.Objectif", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompteId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Valeur")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CompteId");

                    b.ToTable("Objectifs");
                });

            modelBuilder.Entity("BudGET.Domain.Entities.Salaire", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompteId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Valeur")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CompteId");

                    b.ToTable("Salaires");
                });

            modelBuilder.Entity("BudGET.Domain.Entities.Budget", b =>
                {
                    b.HasOne("BudGET.Domain.Entities.Compte", null)
                        .WithMany("Budgets")
                        .HasForeignKey("CompteId");
                });

            modelBuilder.Entity("BudGET.Domain.Entities.Depense", b =>
                {
                    b.HasOne("BudGET.Domain.Entities.Budget", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BudGET.Domain.Entities.Compte", null)
                        .WithMany("Depenses")
                        .HasForeignKey("CompteId");

                    b.Navigation("Budget");
                });

            modelBuilder.Entity("BudGET.Domain.Entities.Objectif", b =>
                {
                    b.HasOne("BudGET.Domain.Entities.Compte", null)
                        .WithMany("Objectifs")
                        .HasForeignKey("CompteId");
                });

            modelBuilder.Entity("BudGET.Domain.Entities.Salaire", b =>
                {
                    b.HasOne("BudGET.Domain.Entities.Compte", null)
                        .WithMany("Salaires")
                        .HasForeignKey("CompteId");
                });

            modelBuilder.Entity("BudGET.Domain.Entities.Compte", b =>
                {
                    b.Navigation("Budgets");

                    b.Navigation("Depenses");

                    b.Navigation("Objectifs");

                    b.Navigation("Salaires");
                });
#pragma warning restore 612, 618
        }
    }
}
