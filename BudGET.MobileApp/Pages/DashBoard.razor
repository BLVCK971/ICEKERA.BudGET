@page "/dashboard"
@using BudGET.MobileApp.Contracts;
@using BudGET.MobileApp.ViewModels.CompteViewModels;
@using System.Globalization;
@using BudGET.MobileApp.ViewModels.DepenseViewModels;



<h3>DashBoard</h3>
@if (comptes == null || compteCourant == null || economies == null)
{
    <p><em>Loading...</em></p>
}
else
{
<button @onclick="AddNewEvent" class="me-1">
    <div class="CompteCourantButtonTitle">Compte Courant :</div>
    <div class="CompteCourantButtonValue">@compteCourant.Montant</div>
</button>
<button @onclick="AddNewEvent" class="EconomieButton me-1">
    <div class="">Economies :</div>
    <div class="">@economies.Sum(x => x.Montant)</div>
</button>
<button @onclick="AddNewEvent" class="BudgetRemainingButton me-1">
    <div class="">Budget restant du mois de @mois</div>
        <div class="">Jours Restants : @joursRestantAvantSalaire</div>
        <div class="">Avant 0 : @montantRestantParJourAvantZero</div>
        <div class="">Avant Fin du Budget : @montantRestantParJourAvantFinBudget</div>
</button>

    <table class="table">
        <thead>
            <tr>
                @foreach(var month in Months)
                {
                    <th>@month.Key</th>
                }
            </tr>
        </thead>
        <tbody>
            <tr>
            @foreach (var month in Months)
            {
                <td>
@*                    <tr>
                            @month.Value[0]
                    </tr>*@
                    <tr>
                            @*Compte n-1 avant prévu après salaire*@ @month.Value[1] €
                    </tr>
                        @*Compte après dépenses exceptionnelles*@
                        @*Dépenses prévues*@
                        @*Compte après prévu/redondant*@
                        @*Compte après budget = n*@
                </td>
            }
            </tr>
        </tbody>          
    </table>

}

@code {
    // Services
    [Inject]
    public ICompteDataService compteDataService { get; set; }
    [Inject]
    public ISalaireDataService _salaireDataService { get; set; }
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    // Données
    public List<CompteListViewModel> comptes { get; set; }

    // Affichage
    CompteListViewModel compteCourant;
    List<CompteListViewModel> economies;
    Dictionary<string, List<string>> Months;

    string compteApresPrevu;

    string mois;
    string joursRestantAvantSalaire;
    string montantRestantParJourAvantZero;
    string montantRestantParJourApresPrevuAvantZero;
    string montantRestantParJourAvantFinBudget; //TODO

    string economiesSixProchainsMoisSiBudgetRespecte; //TODO
    string economiesCinqProchainesAnneeSiBudgetRespecte; //TODO

    List<DepenseListViewModel> ListeDeDepensesRecurrentes; // Depenses where Prevu == true


    protected async override Task OnInitializedAsync()
    {
        int NB_MONTH = 6;

        comptes = await compteDataService.GetAllComptes();
        compteCourant = comptes.Where(c => c.EstCompteCourant == true).First();
        if (compteCourant != null)
        {
            economies = comptes.Where(compte => compte != compteCourant).ToList();
        }

        DateTime now = DateTime.Now;
        var french = CultureInfo.GetCultureInfo("fr-FR");
        mois = now.ToString("MMMM",french.DateTimeFormat);
        var joursRestantAvantMois = ((new DateTime(now.Year, now.Month, 1).AddMonths(1) - now)).Days;
        joursRestantAvantSalaire = joursRestantAvantMois.ToString();
        montantRestantParJourAvantZero = (compteCourant.Montant / joursRestantAvantMois).ToString();




        // Tableau
        double salaires = (await _salaireDataService.GetAllSalaires()).Sum(x => x.Valeur);
        Months = new Dictionary<string, List<string>>();
        double cc = compteCourant.Montant;
        for (var i = 0; i < NB_MONTH; i++)
        {
            var mois = (new DateTime(now.Year, now.Month, 1).AddMonths(i));
            Months.Add(
                mois.ToString("MMMM", french.DateTimeFormat), 
                new List<string>(){
                    mois.ToString(),
                Math.Round(cc,2).ToString()
                });
            cc += salaires;
        }
        
    }


    protected void AddNewEvent()
    {
        NavigationManager.NavigateTo("/counter");
    }
}
