@page "/dashboard"
@using BudGET.MobileApp.Contracts;
@using BudGET.MobileApp.ViewModels.CompteViewModels;
@using System.Globalization;



<h3>DashBoard</h3>
@if (comptes == null || compteCourant == null || economies == null)
{
    <p><em>Loading...</em></p>
}
else
{
<button @onclick="AddNewEvent" class="me-1">
    <div class="CompteCourantButtonTitle">Compte Courant :</div>
    <div class="CompteCourantButtonValue">@compteCourant.Montant</div>
</button>
<button @onclick="AddNewEvent" class="EconomieButton me-1">
    <div class="">Economies :</div>
    <div class="">@economies.Sum(x => x.Montant)</div>
</button>
<button @onclick="AddNewEvent" class="BudgetRemainingButton me-1">
    <div class="">Budget restant du mois de @mois</div>
        <div class="">Jours Restants : @joursRestantAvantSalaire</div>
        <div class="">Avant 0 : @montantRestantParJourAvantZero</div>
        <div class="">Avant Fin du Budget : @montantRestantParJourAvantFinBudget</div>
</button>
<button @onclick="AddNewEvent" class="ReportingsButton me-1">
    <div class="">Reporting</div>
</button>
    <button @onclick="AddNewEvent" class="me-1">
        <div class="">Budgets</div>
    </button>
<button @onclick="AddNewEvent" class="me-1">
    <div class="">Depenses</div>
</button>
    <button @onclick="AddNewEvent" class="me-1">
        <div class="">Salaires</div>
    </button>
    <button @onclick="AddNewEvent" class="me-1">
        <div class="">Objectifs</div>
    </button>
}

@code {
    // Services
    [Inject]
    public ICompteDataService compteDataService { get; set; }
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    // Données
    public List<CompteListViewModel> comptes { get; set; }

    // Affichage
    CompteListViewModel compteCourant;
    List<CompteListViewModel> economies;

    string compteApresPrevu;

    string mois;
    string joursRestantAvantSalaire;
    string montantRestantParJourAvantZero;
    string montantRestantParJourApresPrevuAvantZero;
    string montantRestantParJourAvantFinBudget; //TODO

    string economiesSixProchainsMoisSiBudgetRespecte; //TODO
    string economiesCinqProchainesAnneeSiBudgetRespecte; //TODO


    protected async override Task OnInitializedAsync()
    {
        comptes = await compteDataService.GetAllComptes();
        compteCourant = comptes.Where(c => c.EstCompteCourant == true).First();
        if (compteCourant != null)
        {
            economies = comptes.Where(compte => compte != compteCourant).ToList();
        }
        
        DateTime now = DateTime.Now;
        var french = CultureInfo.GetCultureInfo("fr-FR");
        mois = now.ToString("MMMM",french.DateTimeFormat);
        var joursRestantAvantMois = ((new DateTime(now.Year, now.Month, 1).AddMonths(1) - now)).Days;
        joursRestantAvantSalaire = joursRestantAvantMois.ToString();
        montantRestantParJourAvantZero = (compteCourant.Montant / joursRestantAvantMois).ToString();
    }

    protected void AddNewEvent()
    {
        NavigationManager.NavigateTo("/counter");
    }
}
