@page "/depense/createdepense"
@using BudGET.MobileApp.Contracts;
@using BudGET.MobileApp.ViewModels.BudgetViewModels;
@using BudGET.MobileApp.ViewModels.CompteViewModels;
@using BudGET.MobileApp.ViewModels.DepenseViewModels;


<h3>Création d'un nouveau depense :</h3>
@if (LastSubmitResult != null)
{
    <h2>
        Last submit status: @LastSubmitResult
    </h2>
}

@if (Budgets == null || Comptes == null)
{
    <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
}
else
{
<main class="form-signin w-100 m-auto">
    <EditForm Model=@NewElement OnValidSubmit=@ValidFormSubmitted OnInvalidSubmit=@InvalidFormSubmitted>
        <div class="form-floating">
            <InputText @bind-Value=NewElement.Nom type="text" class="form-control" required id="floatingInput" placeholder="(Alimentation,Essence..)" />
            <label for="floatingInput">Nom du Depense</label>
        </div>
        <div class="form-floating">
            <InputNumber @bind-Value=NewElement.Valeur type="number" class="form-control" id="floatingPassword" />
            <label for="floatingPassword">Montant de la Depense</label>
        </div>
            <div class="form-check text-start my-3">
                <InputCheckbox @bind-Value=NewElement.Prevu class="form-check-input" type="checkbox" id="flexCheckDefault" />
                <label class="form-check-label" for="flexCheckDefault">Prévu ?</label>
            </div>
            @if (NewElement.Prevu)
            {
                <div class="form-check text-start my-3">
                    <InputDate @bind-Value=NewElement.Date class="form-check-input"id="flexCheckDefault" />
                    <label class="form-check-label" for="flexCheckDefault">Date</label>
                </div>
            }
            <div class="form-floating">
            <InputSelect @bind-Value=NewElement.BudgetId  class="form-control" id="floatingPassword">
                @foreach (var budget in Budgets)
                {
                    <option value="@budget.Id">@budget.Nom</option>
                }
            </InputSelect>
            <label for="floatingPassword">Budget Associé</label>
        </div>
            <div class="form-floating">
                <InputSelect @bind-Value=NewElement.CompteId class="form-control" id="floatingPassword">
                    @foreach (var compte in Comptes)
                    {
                        <option value="@compte.Id">@compte.Intitule</option>
                    }
                </InputSelect>
                <label for="floatingPassword">CompteCredité</label>
            </div>
        <button class="btn btn-primary w-100 py-2 " type="submit" disabled=@loading>
            @if (loading)
            {
                <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
            }
            Valider
        </button>
            <button @onclick="Back" class="btn btn-secondary w-100 py-2 mb-2" disabled=@loading>Back</button>
    </EditForm>
</main>
}

@code {
    [Inject]
    private IDepenseDataService DepenseDataService { get; set; }
    [Inject]
    public IBudgetDataService BudgetDataService { get; set; }
    [Inject]
    public ICompteDataService CompteDataService { get; set; }
    [Inject]
    private NavigationManager NavigationManager { get; set; }
    private ICollection<BudgetListViewModel> Budgets { get; set; }
    private ICollection<CompteListViewModel> Comptes { get; set; }

    private DepenseViewModel NewElement = new DepenseViewModel() { Nom = "", Date =DateTime.Now };

    private string LastSubmitResult;
    private bool loading = false;
    protected async override Task OnInitializedAsync()
    {
        Budgets = await BudgetDataService.GetAllBudgets();
        Comptes = await CompteDataService.GetAllComptes();
        NewElement.CompteId = Comptes.Where(c => c.EstCompteCourant == true).FirstOrDefault().Id;
    }
    async Task ValidFormSubmitted(EditContext editContext)
    {
        loading = true;
        var result = await DepenseDataService.CreateDepense(NewElement);
        if (result.Success)
        {
            LastSubmitResult = "OnValidSubmit was executed";
            loading = false;
            NavigationManager.NavigateTo("/depense/indexdepense");
        }
        else
        {
            Console.WriteLine(result.ValidationErrors);
            InvalidFormSubmitted(editContext);
            loading = false;
        }

    }

    void InvalidFormSubmitted(EditContext editContext)
    {
        LastSubmitResult = "Veuillez remplir les champs correctement";
    }
    protected void Back()
    {
        NavigationManager.NavigateTo("depense/indexdepense");
    }
}
