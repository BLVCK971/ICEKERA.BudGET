@page "/salaire/createsalaire"
@using BudGET.MobileApp.Contracts;
@using BudGET.MobileApp.ViewModels.CompteViewModels;
@using BudGET.MobileApp.ViewModels.SalaireViewModels;


<h3>Création d'un nouveau salaire :</h3>
@if (LastSubmitResult != null)
{
    <h2>
        Last submit status: @LastSubmitResult
    </h2>
}

@if (Comptes == null)
{
    <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
}
else
{
<main class="form-signin w-100 m-auto">
    <EditForm Model=@NewElement OnValidSubmit=@ValidFormSubmitted OnInvalidSubmit=@InvalidFormSubmitted>
        <div class="form-floating">
            <InputText @bind-Value=NewElement.Nom type="text" class="form-control" required id="floatingInput" placeholder="(Alimentation,Essence..)" />
            <label for="floatingInput">Nom du Salaire</label>
        </div>
        <div class="form-floating">
            <InputNumber @bind-Value=NewElement.Valeur type="text" class="form-control" id="floatingPassword" />
            <label for="floatingPassword">Montant du Salaire</label>
        </div>
        <div class="form-floating">
            <InputSelect @bind-Value=NewElement.CompteId class="form-control" id="floatingPassword">
                @foreach (var compte in Comptes)
                {
                    <option value="@compte.Id">@compte.Intitule</option>
                }
            </InputSelect>
            <label for="floatingPassword">CompteCredité</label>
        </div>
        <button class="btn btn-primary w-100 py-2 " type="submit" disabled=@loading>
            @if (loading)
            {
                <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
            }
            Valider
        </button>
            <button @onclick="Back" class="btn btn-secondary w-100 py-2 mb-2" disabled=@loading>Back</button>

    </EditForm>
</main>
}

@code {
    [Inject]
    private ISalaireDataService SalaireDataService { get; set; }
    [Inject]
    private ICompteDataService CompteDataService { get; set; }

    [Inject]
    private NavigationManager NavigationManager { get; set; }
    private ICollection<CompteListViewModel> Comptes { get; set; }
    private SalaireViewModel NewElement = new SalaireViewModel() { Nom = "" };

    private string LastSubmitResult;
    private bool loading = false;
    protected async override Task OnInitializedAsync()
    {
        Comptes = await CompteDataService.GetAllComptes();
        NewElement.CompteId = Comptes.Where(c => c.EstCompteCourant == true).FirstOrDefault().Id;
    }
    async Task ValidFormSubmitted(EditContext editContext)
    {
        loading = true;
        var result = await SalaireDataService.CreateSalaire(NewElement);
        if (result.Success)
        {
            LastSubmitResult = "OnValidSubmit was executed";
            loading = false;
            NavigationManager.NavigateTo("/salaire/indexsalaire");
        }
        else
        {
            InvalidFormSubmitted(editContext);
            loading = false;
        }

    }

    void InvalidFormSubmitted(EditContext editContext)
    {
        LastSubmitResult = "Veuillez remplir les champs correctement";
    }
    protected void Back()
    {
        NavigationManager.NavigateTo("salaire/indexsalaire");
    }
}
